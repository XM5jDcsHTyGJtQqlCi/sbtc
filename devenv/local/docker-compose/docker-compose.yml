x-common-vars:
  - &STACKS_BLOCKCHAIN_COMMIT 202b45cc65b88a15d31a33370e47850cf98d7c21
  - &STACKS_API_COMMIT 1c325dfc04d9a81738c48961b4eef1c28fccb3bd
  - &BTC_ADDR miEJtNKa3ASpA19v5ZhvbKTEieYjLpzCYT
  - &MINER_SEED 9e446f6b0c6a96cf2190e54bcd5a8569c3e386f091605499464389b8d4e0bfc201 # stx: STEW4ZNT093ZHK4NEQKX8QJGM2Y7WWJ2FQQS5C19, btc: miEJtNKa3ASpA19v5ZhvbKTEieYjLpzCYT, pub_key: 035379aa40c02890d253cfa577964116eb5295570ae9f7287cbae5f2585f5b2c7c, wif: cStMQXkK5yTFGP3KbNXYQ3sJf2qwQiKrZwR9QJnksp32eKzef1za
  - &BITCOIN_PEER_PORT 18444
  - &BITCOIN_RPC_PORT 18443
  - &BITCOIN_RPC_USER devnet
  - &BITCOIN_RPC_PASS devnet
  - &MINE_INTERVAL ${MINE_INTERVAL:-1s}
  - &MINE_INTERVAL_EPOCH25 ${MINE_INTERVAL_EPOCH25:-10s} # 10 second bitcoin block times in epoch 2.5
  - &MINE_INTERVAL_EPOCH3 ${MINE_INTERVAL_EPOCH3:-30s} # 10 minute bitcoin block times in epoch 3
  - &NAKAMOTO_BLOCK_INTERVAL 2 # seconds to wait between issuing stx-transfer transactions (which triggers Nakamoto block production)
  - &STACKS_20_HEIGHT ${STACKS_20_HEIGHT:-0}
  - &STACKS_2_05_HEIGHT ${STACKS_2_05_HEIGHT:-102}
  - &STACKS_21_HEIGHT ${STACKS_21_HEIGHT:-103}
  - &STACKS_POX2_HEIGHT ${STACKS_POX2_HEIGHT:-104} # 104 is is stacks_block=1, 106 is stacks_block=3
  - &STACKS_22_HEIGHT ${STACKS_22_HEIGHT:-105}
  - &STACKS_23_HEIGHT ${STACKS_23_HEIGHT:-106}
  - &STACKS_24_HEIGHT ${STACKS_24_HEIGHT:-107}
  - &STACKS_25_HEIGHT ${STACKS_25_HEIGHT:-108}
  - &STACKS_30_HEIGHT ${STACKS_30_HEIGHT:-131}
  - &STACKING_CYCLES ${STACKING_CYCLES:-1} # number of cycles to stack-stx or stack-extend for
  - &POX_PREPARE_LENGTH ${POX_PREPARE_LENGTH:-5}
  - &POX_REWARD_LENGTH ${POX_REWARD_LENGTH:-20}
  - &REWARD_RECIPIENT ${REWARD_RECIPIENT:-STQM73RQC4EX0A07KWG1J5ECZJYBZS4SJ4ERC6WN} # priv: 6ad9cadb42d4edbfbe0c5bfb3b8a4125ddced021c4174f829b714ccbf527f02001
  - &EXIT_FROM_MONITOR 1 # set to "1" to automatically shut down via monitor.ts

services:
  bitcoin:
    build:
      context: .
      dockerfile: Dockerfile.btc
    ports:
      - "18443:18443"
      - "18444:18444"
    volumes:
      - ./bitcoin.conf:/root/.bitcoin/bitcoin.conf
      - ./init-data:/init-data
      - chainstate:/chainstate
    environment:
      DATA_DIR: /chainstate/bitcoin-data
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        mkdir -p $${DATA_DIR}
        rm -rf $${DATA_DIR}/*
        bitcoind

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    stop_grace_period: 5s
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  mariadb:
    image: mariadb:10.5.21
    container_name: mariadb
    stop_grace_period: 5s
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: "mempool"
      MYSQL_USER: "mempool"
      MYSQL_PASSWORD: "mempool"
      MYSQL_ROOT_PASSWORD: "admin"

  bitcoin-miner:
    build:
      context: .
      dockerfile: Dockerfile.btc
    depends_on:
      - bitcoin
    volumes:
      - ./bitcoin.conf:/root/.bitcoin/bitcoin.conf
    environment:
      BTC_ADDR: *BTC_ADDR
      MINE_INTERVAL: *MINE_INTERVAL
      MINE_INTERVAL_EPOCH3: *MINE_INTERVAL_EPOCH3
      MINE_INTERVAL_EPOCH25: *MINE_INTERVAL_EPOCH25
      INIT_BLOCKS: 101
      STACKS_30_HEIGHT: *STACKS_30_HEIGHT
      STACKS_25_HEIGHT: *STACKS_25_HEIGHT
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        trap "exit" INT TERM
        trap "kill 0" EXIT
        bitcoin-cli -rpcconnect=bitcoin -rpcwait getmininginfo
        bitcoin-cli -rpcconnect=bitcoin -named createwallet wallet_name=main descriptors=false
        bitcoin-cli -rpcconnect=bitcoin importaddress $${BTC_ADDR} "" false
        bitcoin-cli -rpcconnect=bitcoin generatetoaddress $${INIT_BLOCKS} $${BTC_ADDR}
        DEFAULT_TIMEOUT=$$(($$(date +%s) + 30))
        while true; do
          TX=$$(bitcoin-cli -rpcconnect=bitcoin listtransactions '*' 1 0 true)
          CONFS=$$(echo "$${TX}" | jq '.[].confirmations')
          if [ "$${CONFS}" = "0" ] || [ $$(date +%s) -gt $$DEFAULT_TIMEOUT ]; then
            if [ $$(date +%s) -gt $$DEFAULT_TIMEOUT ]; then
              echo "Timed out waiting for a mempool tx, mining a btc block..."
            else
              echo "Detected Stacks mining mempool tx, mining btc block..."
            fi
            bitcoin-cli -rpcconnect=bitcoin generatetoaddress 1 "$${BTC_ADDR}"
            DEFAULT_TIMEOUT=$$(($$(date +%s) + 30))
          else
            echo "No Stacks mining tx detected"
          fi

          SLEEP_DURATION=$${MINE_INTERVAL}
          BLOCK_HEIGHT=$$(bitcoin-cli -rpcconnect=bitcoin getblockcount)
          if [ "$${BLOCK_HEIGHT}" -gt $$(( $${STACKS_30_HEIGHT} + 1 )) ]; then
            echo "In Epoch3, sleeping for $${MINE_INTERVAL_EPOCH3} ..."
            SLEEP_DURATION=$${MINE_INTERVAL_EPOCH3}
          elif [ "$${BLOCK_HEIGHT}" -gt $$(( $${STACKS_25_HEIGHT} + 1 )) ]; then
            echo "In Epoch2.5, sleeping for $${MINE_INTERVAL_EPOCH25} ..."
            SLEEP_DURATION=$${MINE_INTERVAL_EPOCH25}
          fi
          sleep $${SLEEP_DURATION} &
          wait || exit 0
        done

  stacks:
    build:
      context: ./stacks/docker
      args:
        GIT_COMMIT: *STACKS_BLOCKCHAIN_COMMIT
    depends_on:
      - bitcoin
    ports:
      - "20443:20443"
    volumes:
      - ./stacks-krypton-miner.toml/:/root/config.toml.in
      - ./bitcoin.conf:/root/.bitcoin/bitcoin.conf
      - ./init-data:/init-data
      - chainstate:/chainstate
    environment:
      # STACKS_LOG_TRACE: 1 # uncomment for trace logging
      # STACKS_LOG_DEBUG: 1
      # RUST_LOG: debug
      DATA_DIR: /chainstate/stacks-blockchain-miner-data
      BITCOIN_PEER_HOST: bitcoin
      BITCOIN_PEER_PORT: *BITCOIN_PEER_PORT
      BITCOIN_RPC_PORT: *BITCOIN_RPC_PORT
      BITCOIN_RPC_USER: *BITCOIN_RPC_USER
      BITCOIN_RPC_PASS: *BITCOIN_RPC_PASS
      MINER_SEED: *MINER_SEED
      STACKS_20_HEIGHT: *STACKS_20_HEIGHT
      STACKS_2_05_HEIGHT: *STACKS_2_05_HEIGHT
      STACKS_21_HEIGHT: *STACKS_21_HEIGHT
      STACKS_POX2_HEIGHT: *STACKS_POX2_HEIGHT
      STACKS_22_HEIGHT: *STACKS_22_HEIGHT
      STACKS_23_HEIGHT: *STACKS_23_HEIGHT
      STACKS_24_HEIGHT: *STACKS_24_HEIGHT
      STACKS_25_HEIGHT: *STACKS_25_HEIGHT
      STACKS_30_HEIGHT: *STACKS_30_HEIGHT
      POX_PREPARE_LENGTH: *POX_PREPARE_LENGTH
      POX_REWARD_LENGTH: *POX_REWARD_LENGTH
      REWARD_RECIPIENT: *REWARD_RECIPIENT
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        if [[ ! -z "$${REWARD_RECIPIENT}" ]]; then
          export REWARD_RECIPIENT_CONF="block_reward_recipient = \"$${REWARD_RECIPIENT}\""
        fi
        mkdir -p $${DATA_DIR}
        rm -rf $${DATA_DIR}/*
        envsubst < config.toml.in > config.toml
        bitcoin-cli -rpcwait -rpcconnect=bitcoin getmininginfo
        exec stacks-node start --config config.toml

  stacks-api:
    image: stacks-api:latest
    container_name: stacks-api
    stop_grace_period: 5s
    build:
      context: ./stacks-api/docker
      args:
        GIT_URI: "https://github.com/hirosystems/stacks-blockchain-api.git"
        GIT_BRANCH: "v7.10.0-nakamoto.7"
    ports:
      - 3999:3999
      - 3700:3700
    depends_on:
      - postgres
      - stacks
      - bitcoin
    environment:
      NODE_ENV: "production"
      GIT_TAG: "v7.10.0-nakamoto.7"
      PG_HOST: "postgres"
      PG_PORT: 5432
      PG_USER: "postgres"
      PG_PASSWORD: "postgres"
      PG_DATABASE: "postgres"
      STACKS_CHAIN_ID: "0x80000000"
      STACKS_CORE_EVENT_PORT: 3700
      STACKS_CORE_EVENT_HOST: "0.0.0.0"
      STACKS_BLOCKCHAIN_API_PORT: 3999
      STACKS_BLOCKCHAIN_API_HOST: "0.0.0.0"
      STACKS_CORE_RPC_HOST: "stacks"
      STACKS_CORE_RPC_PORT: 20443
      API_DOCS_URL: http://localhost:3999/doc

  stacks-signer-1:
    build:
      context: ./stacks/docker
      args:
        GIT_COMMIT: *STACKS_BLOCKCHAIN_COMMIT
    depends_on:
      - stacks
    volumes:
      - ./signer-0.toml:/root/config.toml.in
      - chainstate:/chainstate
    environment:
      SIGNER_DB_PATH: /chainstate/stacks-signer-1.sqlite
      STACKS_NODE_HOST: stacks:20443
      STACKS_SIGNER_ENDPOINT: 0.0.0.0:30001
      SIGNER_PRIVATE_KEY: 6a1a754ba863d7bab14adbbc3f8ebb090af9e871ace621d3e5ab634e1422885e01
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        envsubst < config.toml.in > config.toml
        exec stacks-signer run --config config.toml

  stacks-signer-2:
    build:
      context: ./stacks/docker
      args:
        GIT_COMMIT: *STACKS_BLOCKCHAIN_COMMIT
    depends_on:
      - stacks
    volumes:
      - ./signer-0.toml:/root/config.toml.in
      - chainstate:/chainstate
    environment:
      SIGNER_DB_PATH: /chainstate/stacks-signer-2.sqlite
      STACKS_NODE_HOST: stacks:20443
      STACKS_SIGNER_ENDPOINT: 0.0.0.0:30002
      SIGNER_PRIVATE_KEY: b463f0df6c05d2f156393eee73f8016c5372caa0e9e29a901bb7171d90dc4f1401
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        envsubst < config.toml.in > config.toml
        exec stacks-signer run --config config.toml

  stacks-signer-3:
    build:
      context: ./stacks/docker
      args:
        GIT_COMMIT: *STACKS_BLOCKCHAIN_COMMIT
    depends_on:
      - stacks
    volumes:
      - ./signer-0.toml:/root/config.toml.in
      - chainstate:/chainstate
    environment:
      SIGNER_DB_PATH: /chainstate/stacks-signer-3.sqlite
      STACKS_NODE_HOST: stacks:20443
      STACKS_SIGNER_ENDPOINT: 0.0.0.0:30003
      SIGNER_PRIVATE_KEY: 7036b29cb5e235e5fd9b09ae3e8eec4404e44906814d5d01cbca968a60ed4bfb01
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        envsubst < config.toml.in > config.toml
        exec stacks-signer run --config config.toml

  stacks-explorer:
    image: stacks-explorer
    container_name: stacks-explorer
    stop_grace_period: 5s
    build:
      context: ./stacks-explorer/docker
      args:
        GIT_URI: "https://github.com/hirosystems/explorer.git"
        GIT_BRANCH: "v1.170.1"
    ports:
      - 3020:3000
    depends_on:
      - bitcoin
      - stacks
      - stacks-api
      - postgres
    environment:
      NEXT_PUBLIC_MAINNET_API_SERVER: "http://stacks-api:3999"
  electrs:
    image: electrs:latest
    container_name: electrs
    stop_grace_period: 5s
    build:
      context: ./electrs/docker
    ports:
      - 60401:60401
      - 3002:3002
    depends_on:
      - bitcoin
      - bitcoin-miner
    environment:
      RUST_BACKTRACE: 1
      BITCOIN_RPC_HOST: "bitcoin"
      BITCOIN_RPC_PORT: "18443"
  mempool-web:
    image: mempool/frontend:latest
    container_name: mempool-web
    stop_grace_period: 5s
    depends_on:
      - mempool-api
      - mariadb
      - electrs
    user: "1000:1000"
    restart: on-failure
    ports:
      - 8083:8083
    environment:
      FRONTEND_HTTP_PORT: "8083"
      BACKEND_MAINNET_HTTP_HOST: "mempool-api"
    command: "./wait-for mariadb:3306 --timeout=720 -- nginx -g 'daemon off;'"
  mempool-api:
    image: mempool/backend:latest
    container_name: mempool-api
    stop_grace_period: 5s
    depends_on:
      - electrs
      - mariadb
    user: "1000:1000"
    restart: on-failure
    ports:
      - 8999:8999
    environment:
      # Connect to electrs host
      MEMPOOL_BACKEND: "electrum"
      ELECTRUM_HOST: "electrs"
      ELECTRUM_PORT: "60401"
      ELECTRUM_TLS_ENABLED: "false"
      # Connect to bitcoin rpc
      CORE_RPC_HOST: "bitcoin"
      CORE_RPC_PORT: "18443"
      CORE_RPC_USERNAME: "devnet"
      CORE_RPC_PASSWORD: "devnet"
      DATABASE_ENABLED: "true"
      DATABASE_HOST: "mariadb"
      DATABASE_DATABASE: "mempool"
      DATABASE_USERNAME: "mempool"
      DATABASE_PASSWORD: "mempool"
      STATISTICS_ENABLED: "true"
    command: "./wait-for-it.sh mariadb:3306 --timeout=720 --strict -- ./start.sh"

  # Emily services

  # Hosts the DynamoDB Tables.
  dynamodb:
    image: "amazon/dynamodb-local:latest"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    ports:
      - "8000:8000"
    volumes:
      - "../../dynamodb/data:/home/dynamodblocal/data"
    networks:
      - aws-local-vpc

  # Modifies the CDK template and creates DynamoDB Tables if necessary.
  aws-setup:
    build: ../../aws-setup
    depends_on:
      dynamodb:
        condition: service_started
    volumes:
      - "../../aws-setup/initialize.py:/initialize.py"
      - "../../../emily/cdk/cdk.out:/cdk.out"
    environment:
      - DYNAMODB_ENDPOINT=http://dynamodb:8000
      - LOCAL_LAMBDA_PATH=/code/emily-handler/bootstrap.zip
      - INPUT_CDK_TEMPLATE=/cdk.out/EmilyStack.template.json
      - OUTPUT_CDK_TEMPLATE=/cdk.out/EmilyStack.devenv.template.json
    command: python3 ./initialize.py
    networks:
      - aws-local-vpc

  # Hosts the SAM CLI
  apigateway:
    build: ../../apigateway
    depends_on:
      aws-setup:
        condition: service_completed_successfully
    ports:
      - "3000:3000"
    volumes:
      - "../../../target/lambda:/code"
      - "../../../emily/cdk/cdk.out:/cdk.out"
      - "../../lambda:/lambda"
      # Give this container access to the host docker socket so it makes sibling containers and
      # not child containers.
      - "/var/run/docker.sock:/var/run/docker.sock"
      # When the SAM CLI launches a lambda container it decompresses the sources in folder under
      # `tmp` and then mounts that folder onto the new container. When two sibling containers
      # need access to the same directory they need to do that via a directory on the shared host.
      #
      # tl;dr: We're running SAM in a docker container and launching the lambda as a sibling container
      # so we need the `tmp` directory to be shared on the host.
      - "/tmp:/tmp"
    environment:
      - SAM_CLI_TELEMETRY=0
      - SAM_CLI_CONTAINER_CONNECTION_TIMEOUT=10
    command: |
      sam local start-api
        --host 0.0.0.0
        --container-host ${CONTAINER_HOST}
        --docker-network aws-local-vpc
        --warm-containers LAZY
        --env-vars /lambda/env.json
        -t /cdk.out/EmilyStack.devenv.template.json
    networks:
      - aws-local-vpc

  service-test:
    build: ../../service-test
    image: "debian:12.5"
    profiles:
      - test
    depends_on:
      apigateway:
        condition: service_started
    volumes:
      - "../../service-test:/service-test:ro"
    command: bash /service-test/curl-test.sh apigateway 3000 5
    networks:
      - aws-local-vpc

  # Auto-stacking scripts

  stacker:
    build:
      context: .
      dockerfile: Dockerfile.stacker
    environment:
      STACKS_CORE_RPC_HOST: stacks
      STACKS_CORE_RPC_PORT: 20443
      STACKING_CYCLES: *STACKING_CYCLES
      STACKING_KEYS: 6a1a754ba863d7bab14adbbc3f8ebb090af9e871ace621d3e5ab634e1422885e01,b463f0df6c05d2f156393eee73f8016c5372caa0e9e29a901bb7171d90dc4f1401,7036b29cb5e235e5fd9b09ae3e8eec4404e44906814d5d01cbca968a60ed4bfb01
      STACKS_25_HEIGHT: *STACKS_25_HEIGHT
      STACKS_30_HEIGHT: *STACKS_30_HEIGHT
      POX_PREPARE_LENGTH: *POX_PREPARE_LENGTH
      POX_REWARD_LENGTH: *POX_REWARD_LENGTH
      STACKING_INTERVAL: 2 # interval (seconds) for checking if stacking transactions are needed
      POST_TX_WAIT: 10 # seconds to wait after a stacking transaction broadcast before continuing the loop
      SERVICE_NAME: stacker
    depends_on:
      - stacks

  monitor:
    build:
      context: .
      dockerfile: Dockerfile.stacker
    environment:
      STACKS_CORE_RPC_HOST: stacks-api
      STACKS_CORE_RPC_PORT: 3999
      STACKING_CYCLES: *STACKING_CYCLES
      STACKING_KEYS: 6a1a754ba863d7bab14adbbc3f8ebb090af9e871ace621d3e5ab634e1422885e01,b463f0df6c05d2f156393eee73f8016c5372caa0e9e29a901bb7171d90dc4f1401,7036b29cb5e235e5fd9b09ae3e8eec4404e44906814d5d01cbca968a60ed4bfb01
      STACKS_25_HEIGHT: *STACKS_25_HEIGHT
      STACKS_30_HEIGHT: *STACKS_30_HEIGHT
      POX_PREPARE_LENGTH: *POX_PREPARE_LENGTH
      POX_REWARD_LENGTH: *POX_REWARD_LENGTH
      EXIT_FROM_MONITOR: *EXIT_FROM_MONITOR
      SERVICE_NAME: monitor
    depends_on:
      - stacks
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        exec npx tsx /root/monitor.ts

  tx-broadcaster:
    build:
      context: .
      dockerfile: Dockerfile.stacker
    environment:
      STACKS_CORE_RPC_HOST: stacks
      STACKS_CORE_RPC_PORT: 20443
      NAKAMOTO_BLOCK_INTERVAL: *NAKAMOTO_BLOCK_INTERVAL
      STACKS_30_HEIGHT: *STACKS_30_HEIGHT
      ACCOUNT_KEYS: 0d2f965b472a82efd5a96e6513c8b9f7edc725d5c96c7d35d6c722cedeb80d1b01,975b251dd7809469ef0c26ec3917971b75c51cd73a022024df4bf3b232cc2dc001,c71700b07d520a8c9731e4d0f095aa6efb91e16e25fb27ce2b72e7b698f8127a01
      STACKS_25_HEIGHT: *STACKS_25_HEIGHT
      POX_PREPARE_LENGTH: *POX_PREPARE_LENGTH
      POX_REWARD_LENGTH: *POX_REWARD_LENGTH
      STACKING_KEYS: 6a1a754ba863d7bab14adbbc3f8ebb090af9e871ace621d3e5ab634e1422885e01,b463f0df6c05d2f156393eee73f8016c5372caa0e9e29a901bb7171d90dc4f1401,7036b29cb5e235e5fd9b09ae3e8eec4404e44906814d5d01cbca968a60ed4bfb01
    depends_on:
      - stacks
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        exec npx tsx /root/tx-broadcaster.ts

  contract-deployer:
    image: hirosystems/clarinet:latest
    volumes:
      - ../../../contracts/Clarinet.toml:/Clarinet.toml
      - ../../../contracts/contracts:/contracts
      - ../../../contracts/settings:/settings
      - ../../../contracts/deployments:/deployments
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        echo "Sleeping for 15 seconds before starting deployment..."
        sleep 15
        clarinet deployments apply -p /deployments/default.devnet-docker.yaml --no-dashboard -m /Clarinet.toml -d
    depends_on:
      - stacks
      - stacks-api

networks:
  aws-local-vpc:
    name: aws-local-vpc
volumes:
  chainstate:
