# This file is used for running the dependencies of the sBTC signer.
#
# It is intended to become a template for the absolute minimum required
# dependencies to run the signer and used to adapt the devenv later. 
# See # TODO(536)

volumes:
  dynamodb_data:

networks:
  sbtc_signer:
    driver: bridge

services:

  signer:
    container_name: sbtc-signer
    build:
      context: .
      dockerfile: Dockerfile.signer
    volumes:
      - .:/data
    networks:
      - sbtc_signer
    working_dir: /data
    command: 
      - /bin/bash
      - -c 
      - . /root/.cargo/env && cargo run --target x86_64-unknown-linux-gnu --bin signer -- -c /data/signer/src/config/default.toml --migrate-db
    environment:
      RUST_BACKTRACE: 1
      RUST_LOG: info
      SIGNER_SIGNER__DB_ENDPOINT: postgres://devenv:devenv@sbtc-postgres/signer
    depends_on:
      postgres:
        condition: service_healthy
      bitcoind:
        condition: service_healthy

  bitcoind:
    container_name: sbtc-bitcoind
    image: lncm/bitcoind:v27.0
    volumes:
      - ./signer/tests/service-configs/bitcoin.conf:/data/.bitcoin/bitcoin.conf:ro
    restart: on-failure
    # For some reason, the CMD in the original Dockerfile is set to publish
    # events on zeromq, and it seems to interfere with the events that we
    # want to publish. So we overwrite the CMD by just setting the
    # -logtimestamps argument in the command here.
    command: ["-logtimestamps"]
    stop_grace_period: 10s
    ports:
      - 18443:18443
      - 28332:28332
    networks:
      - sbtc_signer
    healthcheck:
      test: ["CMD-SHELL", "bitcoin-cli getblockcount"]
      interval: 3s
      timeout: 1s
      retries: 3

  postgres:
    image: postgres:16.3
    container_name: sbtc-postgres
    environment:
      POSTGRES_USER: devenv
      POSTGRES_PASSWORD: devenv
      POSTGRES_DB: signer
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - ":5432"
    networks:
      - sbtc_signer
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --username=postgres --dbname=signer"]
      interval: 2s
      timeout: 1s
      retries: 5

  dynamodb:
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    user: root
    ports:
      - "8000:8000"
    restart: always
    volumes:
      - dynamodb_data:/home/dynamodblocal/data:rw
    working_dir: /home/dynamodblocal

  dynamodb-admin: 
    image: "aaronshaf/dynamodb-admin"
    container_name: dynamodb-admin
    depends_on:
      - dynamodb
    restart: always
    ports:
      - "8001:8001"
    environment:
      - DYNAMO_ENDPOINT=http://dynamodb:8000
      - AWS_REGION=eu-west-1
    profiles:
      - tools

    # Modifies the CDK template and creates DynamoDB Tables if necessary.
  aws-setup:
    build: devenv/aws-setup
    depends_on:
      dynamodb:
        condition: service_started
    volumes:
      - "./devenv/aws-setup/initialize.py:/initialize.py"
      - "./emily/cdk/cdk.out:/cdk.out"
    environment:
      - DYNAMODB_ENDPOINT=http://dynamodb:8000
      - LOCAL_LAMBDA_PATH=/code/emily-handler/bootstrap.zip
      - INPUT_CDK_TEMPLATE=/cdk.out/EmilyStack.template.json
      - OUTPUT_CDK_TEMPLATE=/cdk.out/EmilyStack.devenv.template.json
    command: python3 ./initialize.py