# DISCLAIMER! READ!
# This configuration file is an example of how it will likely look in production with some
# values filled in with example placeholders like `your-private-key` and `your-bitcoin-node`.
# The real production configuration will rely on some hardcoded values that can only be
# known after initial seed node deployments. This file is not meant to be used as is, but one will
# be created to be used later, and this documentation will be updated to reflect those changes.

# TODO(715): Provide sane/safe configuration defaults. Re-review all of them!
# TODO(429): Add documentation for all configuration parameters.

# !! ==============================================================================
# !! Blocklist Client Configuration
# !! ==============================================================================
[blocklist_client]

# You may specify a blocklist client url. If one is not specified, then
# deposit or withdrawal requests are always accepted.
#
# Format: "http(s)://<host>:<port>"
# Default: <none>
# Required: false
# Environment: SIGNER_BLOCKLIST_CLIENT__ENDPOINT
#
# Defined in the provided docker compose, do not uncomment unless you know
# what you're doing.
# -------------------------------------------------------------------------
# endpoint = "http://127.0.0.1:8080"

# !! ==============================================================================
# !! Emily API Configuration
# !! ==============================================================================
[emily]
# The URI(s) of the Emily API server to connect to.
#
# You may specify multiple Emily API servers if you have them. They will be
# tried round-robin until one succeeds.
#
# Format: ["http(s)://<host>:<port>", ..]
# Default: <none>
# Required: true
# Environment: SIGNER_EMILY__ENDPOINTS
endpoints = [
    "https://emily-sbtc.com"
]

# !! ==============================================================================
# !! Bitcoin Core Configuration
# !! ==============================================================================
[bitcoin]
# The URI(s) of the Bitcoin Core RPC server(s) to connect to.
#
# You may specify multiple Bitcoin Core RPC servers if you have them. They will
# be randomly tried until one succeeds.
#
# Format: ["http://<user>:<pass>@<host>:<port>", ..]
# Default: <none>
# Required: true
# Environment: SIGNER_BITCOIN__RPC_ENDPOINTS
# Environment Example: http://user:pass@seed-1:4122,http://foo:bar@seed-2:4122
rpc_endpoints = [
    "http://user:pass@your-bitcoin-node:4122",
]

# The URI(s) of the Bitcoin Core ZMQ block hash stream(s) to connect to.
#
# You may optionally specify multiple endpoints if you have them. They will be
# tried in order until one succeeds, and it will attempt failover to the next
# endpoint if the connection is lost.
#
# Format: ["tcp://<host>:<port>", ..]
# Default: <none>
# Required: true
# Environment: SIGNER_BITCOIN__BLOCK_HASH_STREAM_ENDPOINTS
# Environment Example: tcp://10.0.0.1:28332,tcp://10.0.0.2:28332
block_hash_stream_endpoints = [
    "tcp://localhost:28332"
]

# !! ==============================================================================
# !! Stacks Node Configuration
# !! ==============================================================================
[stacks]
# The RPC URL(s) of the Stacks node(s) to connect to. At least one must be
# provided. If multiple nodes are provided they will be tried in order when
# making requests.
endpoints = []

# !! ==============================================================================
# !! Signer Configuration
# !! ==============================================================================
[signer]
# The private key associated with the signer. This is used to generate the
# signers associated public key and sign messages to other signers.
#
# This may be either in 32- or 33-byte format. If you generated the key using
# `stacks-cli` or other ecosystem tools, it is likely that the key is in 33-byte
# format which includes a stacks-proprietary suffix byte. The sBTC signer doesn't
# make use of this byte and it will be trimmed automatically if provided.
#
# Format: "<hex-encoded-private-key>" (64 or 66 hex-characters)
# Required: true
# Environment: SIGNER_SIGNER__PRIVATE_KEY
private_key = "0000000000000000000000000000000000000000000000000000000000000001"

# Specifies which network to use when constructing and sending transactions
# on stacks and bitcoin. This cooresponds to the `chain` flag in the
# bitcoin.conf file of the connected bitcoin-core node, and the
# `burnchain.mode` flag int he config.toml of the connected stacks-core
# node.
#
# Required: true
# Possible values: mainnet, testnet, regtest
# Environment: SIGNER_SIGNER__NETWORK
network = "mainnet"

# The address that deployed the sbtc smart contracts.
#
# Required: true
# TODO(715): Change after SCs have been deployed.
deployer = "ST000000000000000000002AMW42H"

# The signer database endpoint (pgsql connection string)
#
# Required: true
# Environment: SIGNER_SIGNER__DB_ENDPOINT
#
# Defined in the provided docker compose, do not uncomment unless you know
# what you're doing.
# -------------------------------------------------------------------------
# db_endpoint = "postgresql://postgres:postgres@localhost:5432/signer"

# A complete list of (compressed) public keys for known bootstrap signer
# peers who are approved to be in the sBTC signer set.
#
# Required: true Environment: SIGNER_SIGNER__BOOTSTRAP_SIGNING_SET
# TODO(715): Change after initial signing set has been determined.
bootstrap_signing_set = []

# The number of signatures required for signing Stacks transactions when
# using the multi-sig wallet formed from the public keys in the
# `bootstrap_signing_set`. Must be strictly positive.
#
# Required: true Environment: SIGNER_SIGNER__BOOTSTRAP_SIGNATURES_REQUIRED
bootstrap_signatures_required = 15

# Seconds to wait before processing a new Bitcoin block.
# Required: true Environment: SIGNER_SIGNER__BITCOIN_PROCESSING_DELAY
# TODO(715): Expect this to change after testing.
bitcoin_processing_delay = 0

# The number of blocks back the block observer should look for unprocessed
# blocks before proceeding.
# Required: true
# Environment: SIGNER_SIGNER__BITCOIN_BLOCK_HORIZON
bitcoin_block_horizon = 1500

# How many bitcoin blocks back from the chain tip the signer will look for
# requests. Must be strictly positive.
#
# Required: false
# Environment: SIGNER_SIGNER__CONTEXT_WINDOW
# context_window = 500

# The maximum amount of time, in seconds, a signing round will take before
# the coordinator will time out and return an error. This value must be
# strictly positive.
#
# Required: false
# Environment: SIGNER_SIGNER__SIGNER_ROUND_MAX_DURATION
# signer_round_max_duration = 30

# The maximum amount of time, in seconds, a coordinator will wait for
# pre-sign ACKs before timing out. Must be strictly
# positive.
#
# Required: false
# Environment: SIGNER_SIGNER__BITCOIN_PRESIGN_REQUEST_MAX_DURATION
# bitcoin_presign_request_max_duration = 30

# The maximum amount of time, in seconds, for a distributed key generation
# round before the coordinator will time out and return an error. Must be
# strictly positive.
#
# Required: false
# Environment: SIGNER_SIGNER__DKG_MAX_DURATION
# dkg_max_duration = 120

# The amount of time, in seconds, the signer should pause for after
# receiving a DKG begin message before relaying to give the other signers.
#
# Required: false
# Environment: SIGNER_SIGNER__DKG_BEGIN_PAUSE
dkg_begin_pause = 10

# !! ==============================================================================
# !! Stacks Event Observer Configuration
# !!
# !! The event observer listens for events on the Stacks blockchain. The listen
# !! address must be reachable by your Stacks node, and must be configured in the
# !! node's `event_observer` configuration section.
# !!
# !! Note that the event observer endpoint _does not_ support TLS and is served
# !! over HTTP.
# !! ==============================================================================
[signer.event_observer]
# The network interface (ip address) and port to bind the event observer server to.
#
# Format: "<ip>:<port>"
# Required: true
# Environment: SIGNER_SIGNER__EVENT_OBSERVER__BIND
bind = "0.0.0.0:8801"

# !! ==============================================================================
# !! Signer P2P Networking Configuration
# !! ==============================================================================
[signer.p2p]
# List of seed nodes to connect to bootstrap the network.
#
# If specified, these nodes will be used to discover other nodes on the network.
# If not specified or if none of the specified seeds could be reached, the node
# will attempt to discover other nodes using StackerDB.
#
# See the `listen_on` parameter for available protocols.
#
# Format: ["<protocol>:<ip>:<port>", "<protocol>:<ip>:<port>", ...]
# Required: false
# Environment: SIGNER_SIGNER__P2P__SEEDS
# Environment Example: tcp://seed-1:4122,tcp://seed-2:4122
# TODO(429): Add well-known seed nodes
# TODO(715): Add well-known seed nodes
seeds = []

# The local network interface(s) and port(s) to listen on.
#
# You may specify multiple interfaces and ports by adding additional entries to
# the list. Entries can be addressed by any of IPv4 address, IPv6 address or
# hostname. Note that not all networks have IPv6 enabled, so it is recommended
# to provide an IPv4 address as well.
#
# Specifying a port of `0` will cause the server to bind to a random port,
# and an IP of `0.0.0.0` will cause the server to listen on all available
# interfaces.
#
# Available protocols:
# - tcp: Standard TCP socket connections.
# - quick-v1: QUIC over UDP. This protocol is faster and uses less bandwidth,
#       but may not be supported by all nodes' networks. Nodes will always
#       attempt QUIC connections first, and fall back to TCP if it fails.
#       If UDP is blocked on your network then you should not specify a QUIC
#       listener (as it will never be reachable).
#       More information: https://en.wikipedia.org/wiki/QUIC
#
# Format: ["<protocol>:<ip>[:port]", ...]
# - If port is omitted then the default port 4122 will be used.
# Default: ["tcp://0.0.0.0:4122", "quic-v1://0.0.0.0:4122"]
# Required: false
# Environment: SIGNER_SIGNER__P2P__LISTEN_ON
#
# Defined in the provided docker compose, do not uncomment unless you know
# what you're doing.
# -------------------------------------------------------------------------
listen_on = ["tcp://0.0.0.0:4122", "quic-v1://0.0.0.0:4122"]

# The publicly accessible network endpoint to advertise to other nodes.
#
# If this is not specified then the node will attempt to use other peers on the
# network to determine its public endpoint. This is the recommended
# configuration for most users.
#
# If your network uses an advanced configuration with separate inbound/outbound
# addresses then you must specify this value with your inbound address and
# configure port-forwarding as auto-discovery will report your outbound address.
#
# Format: ["<protocol>:<ip>:<port>", ...] (see `listen_on` for protocol options)
# Default: <none>
# Required: false
# Environment: SIGNER_SIGNER__P2P__PUBLIC_ENDPOINTS
public_endpoints = []
