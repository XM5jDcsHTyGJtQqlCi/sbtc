// This file is @generated by prost-build.
/// Represents a decision to accept or reject a deposit request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignerDepositDecision {
    /// The bitcoin transaction ID of the transaction containing the deposit
    /// request. It must be 32 bytes.
    #[prost(message, optional, tag = "1")]
    pub txid: ::core::option::Option<BitcoinTxid>,
    /// Index of the deposit request UTXO.
    #[prost(uint32, tag = "2")]
    pub output_index: u32,
    /// Whether or not the signer has accepted the deposit request.
    #[prost(bool, tag = "3")]
    pub accepted: bool,
}
/// Represents a decision to accept or reject a deposit request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignerWithdrawDecision {
    /// ID of the withdraw request.
    #[prost(uint64, tag = "1")]
    pub request_id: u64,
    /// The Stacks block ID of the Stacks block containing the request. It
    /// must be 32 bytes.
    #[prost(message, optional, tag = "2")]
    pub block_id: ::core::option::Option<StacksBlockId>,
    /// The stacks transaction ID that lead to the creation of the
    /// withdrawal request.
    #[prost(message, optional, tag = "3")]
    pub txid: ::core::option::Option<StacksTxid>,
    /// Whether or not the signer has accepted the withdrawal request.
    #[prost(bool, tag = "4")]
    pub accepted: bool,
}
/// The id for a transaction on the stacks blockchain.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StacksTxid {
    #[prost(message, optional, tag = "1")]
    pub txid: ::core::option::Option<super::super::Uint256>,
}
/// The id for a transaction on the bitcoin blockchain.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BitcoinTxid {
    #[prost(message, optional, tag = "1")]
    pub txid: ::core::option::Option<super::super::Uint256>,
}
/// This type maps to the StacksBlockId in the stackslib Rust crate.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StacksBlockId {
    #[prost(message, optional, tag = "1")]
    pub block_id: ::core::option::Option<super::super::Uint256>,
}
