syntax = "proto3";

package stacks.signer.v1;

import "bitcoin/bitcoin.proto";
import "crypto/common.proto";
import "stacks/common.proto";

// Represents a request to sign a Bitcoin transaction.
message BitcoinTransactionSignRequest {
  // The transaction.
  bytes tx = 1;
  // The aggregate key used to sign the transaction,
  crypto.PublicKey aggregate_key = 2;
}

// Represents a request to sign a Stacks transaction.
message StacksTransactionSignRequest {
  // The aggregate public key that will sign the transaction.
  crypto.PublicKey aggregate_key = 1;
  // The contract call transaction to sign.
  // pub contract_call: ContractCall,
  // The nonce to use for the transaction.
  uint64 nonce = 3;
  // The transaction fee in microSTX.
  uint64 tx_fee = 4;
  // The expected digest of the transaction than needs to be signed.
  // It's essentially a hash of the contract call struct, the nonce, the
  // tx_fee and a few other things.
  crypto.Uint256 digest = 5;
}

// A complete-deposit contract call on Stacks.
message CompleteDeposit {
  // The outpoint of the bitcoin UTXO that was spent as a deposit for
  // sBTC.
  bitcoin.OutPoint outpoint = 1;
  // The amount of sats swept in by the signers when they moved in the
  // above UTXO.
  uint64 amount = 2;
  // The address where the newly minted sBTC will be deposited.
  stacks.StacksPrincipal recipient = 3;
  // The address that deployed the sBTC smart contract containing the
  // complete-deposit contract call.
  stacks.StacksAddress deployer = 4;
  // The transaction ID for the sweep transaction that moved the deposit
  // UTXO into the signers' UTXO. One of the inputs to the sweep
  // transaction must be the above `outpoint`.
  bitcoin.BitcoinTxid sweep_txid = 5;
  // The block hash of the bitcoin block that contains a sweep
  // transaction with the above `outpoint` as one of its inputs.
  bitcoin.BitcoinBlockHash sweep_block_hash = 6;
  // The block height associated with the above bitcoin block hash.
  uint64 sweep_block_height = 7;
}

// The `accept-withdrawal-request` contract call on the stacks blockchain.
message AcceptWithdrawal {
  // The ID of the withdrawal request generated by the
  // `initiate-withdrawal-request` function in the sbtc-withdrawal smart
  // contract.
  uint64 request_id = 1;
  // The outpoint of the bitcoin UTXO that was spent to fulfill the
  // withdrawal request.
  bitcoin.OutPoint outpoint = 2;
  // The fee that was spent to the bitcoin miner when fulfilling the
  // withdrawal request.
  uint64 tx_fee = 3;
  // A bitmap of how the signers voted. This structure supports up to
  // 128 distinct signers. Here, we assume that a 1 (or true) implies
  // that the signer voted *against* the transaction.
  repeated bool signer_bitmap = 4;
  // The address that deployed the contract.
  stacks.StacksAddress deployer = 5;
  // The block hash of the bitcoin block that contains a sweep
  // transaction with the above `outpoint` as one of its outputs.
  bitcoin.BitcoinBlockHash sweep_block_hash = 6;
  // The block height associated with the above bitcoin block hash.
  uint64 sweep_block_height = 7;
}
