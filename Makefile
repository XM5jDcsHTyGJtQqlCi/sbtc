# Convenience data so we can run the following and include
# sources from three directories deep.
#
# Example:
# $(subst dir, emily/cdk/lib, $(THREE_DIRS_DEEP))
# becomes
# emily/cdk/lib/*  emily/cdk/lib/*/*  emily/cdk/lib/*/*/*
ONE_DIR_DEEP    := dir/*
TWO_DIRS_DEEP   := dir/* $(subst dir, dir/*, $(ONE_DIR_DEEP))
THREE_DIRS_DEEP := dir/* $(subst dir, dir/*, $(TWO_DIRS_DEEP))
FOUR_DIRS_DEEP  := dir/* $(subst dir, dir/*, $(THREE_DIRS_DEEP))
FIVE_DIRS_DEEP  := dir/* $(subst dir, dir/*, $(FOUR_DIRS_DEEP))

# Blocklist Client Files
AUTOGENERATED_BLOCKLIST_CLIENT_CLIENT := .generated-sources/blocklist-api/src/lib.rs
BLOCKLIST_OPENAPI_PATH := ./.generated-sources/blocklist-openapi-gen
BLOCKLIST_OPENAPI_SPEC := $(BLOCKLIST_OPENAPI_PATH)/blocklist-client-openapi.json

# Emily API Files
EMILY_OPENAPI_SPEC := .generated-sources/emily/openapi/emily-openapi-spec.json
EMILY_LAMBDA_BINARY := target/lambda/emily-handler/bootstrap.zip
EMILY_CDK_TEMPLATE := emily/cdk/cdk.out/EmilyStack.template.json
EMILY_DOCKER_COMPOSE := docker-compose.emily.yml

# File that's updated whenever there's a new pnpm installation.
INSTALL_TARGET := pnpm-lock.yaml

# Don't use the install target here so you can rerun install without
# Makefile complaints.
export DATABASE_URL=postgres://user:password@localhost:5432/signer

install:
	pnpm install
	touch pnpm-lock.yaml

build: $(INSTALL_TARGET) $(AUTOGENERATED_BLOCKLIST_CLIENT_CLIENT)
	SQLX_OFFLINE=true cargo build
	pnpm --recursive build

test: $(INSTALL_TARGET) $(AUTOGENERATED_BLOCKLIST_CLIENT_CLIENT)
	SQLX_OFFLINE=true cargo test
	pnpm --recursive test

integration-test: $(INSTALL_TARGET) $(AUTOGENERATED_BLOCKLIST_CLIENT_CLIENT)
	cargo test --test integration --all-features -- --test-threads=1

lint: $(INSTALL_TARGET) $(AUTOGENERATED_BLOCKLIST_CLIENT_CLIENT)
	SQLX_OFFLINE=true cargo clippy -- -D warnings
	pnpm --recursive run lint

clean:
	cargo clean
	pnpm --recursive clean
	rm -rf devenv/dynamodb/data/*
	@touch package.json

.PHONY: install build test integration-test lint clean

$(INSTALL_TARGET): $(wildcard package* */package* */*/package*)
	pnpm install
	touch pnpm-lock.yaml

# Emily API
# ----------------------------------------------------

# Project Names
## Cargo crates
EMILY_HANDLER_PROJECT_NAME := emily-handler
EMILY_OPENAPI_SPEC_PROJECT_NAME := emily-openapi-spec
## Node projects
EMILY_CDK_PROJECT_NAME := emily-cdk

# Set container host environment variable depending on the local
# system of the host.
ifeq ($(findstring Linux, $(shell uname)), Linux)
_CONTAINER_HOST := localhost
else
_CONTAINER_HOST := host.docker.internal
endif

# Emily Integration Environment ----------------------

# Launches Emily integration tests environment.
emily-integration-test: devenv $(EMILY_LAMBDA_BINARY) $(EMILY_CDK_TEMPLATE) $(EMILY_DOCKER_COMPOSE)
	@echo "Running Emily integration test."
	CONTAINER_HOST=$(_CONTAINER_HOST) docker compose \
		--file docker-compose.emily.yml \
		--profile test \
		up \
		--remove-orphans

# Launches Emily dev environment.
emily-integration-environment: devenv $(EMILY_LAMBDA_BINARY) $(EMILY_CDK_TEMPLATE) $(EMILY_DOCKER_COMPOSE)
	@echo "Starting Emily integration test environment."
	CONTAINER_HOST=$(_CONTAINER_HOST) docker compose \
		--file $(EMILY_DOCKER_COMPOSE) \
		up \
		--remove-orphans

.PHONY: emily-integration-test

# Builds all dockerfiles that need to be built for the dev environment.
devenv: $(wildcard $(subst dir, devenv, $(TWO_DIRS_DEEP)))
	docker compose -f docker-compose.emily.yml build
	@touch devenv

# Emily CDK Template ---------------------------------

EMILY_CDK_SOURCE_FILES := $(wildcard $(subst dir, emily/cdk/lib, $(FIVE_DIRS_DEEP)))
EMILY_CDK_SOURCE_FILES := $(wildcard $(subst dir, emily/bin/lib, $(FIVE_DIRS_DEEP))) $(EMILY_CDK_SOURCE_FILES)

$(EMILY_CDK_TEMPLATE): $(INSTALL_TARGET) $(EMILY_OPENAPI_SPEC) $(EMILY_CDK_SOURCE_FILES)
	AWS_STAGE=local \
	pnpm --filter $(EMILY_CDK_PROJECT_NAME) run synth

# Emily Handler --------------------------------------

EMILY_HANDLER_SOURCE_FILES := $(wildcard $(subst dir, emily/handler, $(FIVE_DIRS_DEEP)))

# Build the OpenAPI specification.
$(EMILY_OPENAPI_SPEC): $(EMILY_HANDLER_SOURCE_FILES)
	cargo build --package $(EMILY_OPENAPI_SPEC_PROJECT_NAME)

# Build the zipped binary for the Emily Handler that AWS Lambda can deploy.
ifneq ($(filter arm64 aarch64, $(shell uname -m)),)
_LAMBDA_FLAGS := --arm64
endif
$(EMILY_LAMBDA_BINARY): $(EMILY_HANDLER_SOURCE_FILES)
	cargo lambda build \
		--release \
		--package $(EMILY_HANDLER_PROJECT_NAME) \
		--output-format zip \
		$(_LAMBDA_FLAGS)

# Emily Manual Task Triggers -------------------------

emily-lambda: $(EMILY_LAMBDA_BINARY)
emily-cdk-synth: $(EMILY_CDK_TEMPLATE)
emily-openapi-spec: $(EMILY_OPENAPI_SPEC)
emily-curl-test: $(EMILY_LAMBDA_BINARY)
	./devenv/service-test/curl-test.sh localhost 3000 0

.PHONY: emily-lambda emily-cdk-synth emily-openapi-spec emily-curl-test

# Blocklist Client API
# ----------------------------------------------------

# Generate the client code using the OpenAPI spec
$(AUTOGENERATED_BLOCKLIST_CLIENT_CLIENT): $(BLOCKLIST_OPENAPI_SPEC)
	pnpm --prefix $(BLOCKLIST_OPENAPI_PATH) run build

# Generate the OpenAPI spec for Blocklist Client
$(BLOCKLIST_OPENAPI_SPEC): $(INSTALL_TARGET) $(filter-out $(BLOCKLIST_OPENAPI_SPEC), $(wildcard $(subst dir, $(BLOCKLIST_OPENAPI_PATH), $(THREE_DIRS_DEEP))))
	cd ./.generated-sources/blocklist-openapi-gen && cargo build
